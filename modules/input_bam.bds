#!/usr/bin/env bds
#vim: syntax=java

include "conf.bds"


help == bam input (raw or filtered) definition :
help         Raw bam : For replicate '-bam[REP_ID]', For control '-ctl_bam[REP_ID]'.
help         Filtered bam : For replicate '-filt_bam[REP_ID]', For control '-ctl_filt_bam[REP_ID]'.


string get_bam( int ctl, int rep ) {

	key := ( ctl > 0 ? "ctl_bam" : "bam" ) + "_rep" + rep
	key2 := ( ctl > 0 ? "ctl_bam" : "bam" ) + rep
	key3 := ( ctl > 0 ? "ctl_bam" : "bam" )

	if ( cmd_line_arg_has_key( key ) ) {
		return get_path( get_cmd_line_arg_val( key ) )
	}
	else if ( cmd_line_arg_has_key( key2 ) ) {
		return get_path( get_cmd_line_arg_val( key2 ) )
	}
	else if ( (rep==1) && cmd_line_arg_has_key( key3 ) ) {
		return get_path( get_cmd_line_arg_val( key3 ) )
	}
	else if ( conf.hasKey( key ) ) {
		return get_path( conf{ key } )
	}
	else if ( conf.hasKey( key2 ) ) {
		return get_path( conf{ key2 } )
	}
	else if ( (rep==1) && conf.hasKey( key3 ) ) {
		return get_path( conf{ key3 } )
	}
	return ""
}

string get_bam( int rep ) {

	return get_bam( 0, rep )
}

string get_filt_bam( int ctl, int rep ) {

	key := ( ctl > 0 ? "ctl_filt_bam" : "filt_bam" ) + "_rep" + rep
	key2 := ( ctl > 0 ? "ctl_filt_bam" : "filt_bam" ) + rep
	key3 := ( ctl > 0 ? "ctl_filt_bam" : "filt_bam" )

	if ( cmd_line_arg_has_key( key ) ) {
		return get_path( get_cmd_line_arg_val( key ) )
	}
	else if ( cmd_line_arg_has_key( key2 ) ) {
		return get_path( get_cmd_line_arg_val( key2 ) )
	}
	else if ( (rep==1) && cmd_line_arg_has_key( key3 ) ) {
		return get_path( get_cmd_line_arg_val( key3 ) )
	}
	else if ( conf.hasKey( key ) ) {
		return get_path( conf{ key } )
	}
	else if ( conf.hasKey( key2 ) ) {
		return get_path( conf{ key2 } )
	}
	else if ( (rep==1) && conf.hasKey( key3 ) ) {
		return get_path( conf{ key3 } )
	}
	return ""
}

string get_filt_bam( int rep ) {

	return get_filt_bam( 0, rep )
}

bool is_input_bam( int ctl, int rep ) {

	return get_bam( ctl, rep ) != ""
}

bool is_input_bam( int rep ) {

	return is_input_bam( 0, rep )
}

bool is_input_filt_bam( int ctl, int rep ) {

	return get_filt_bam( ctl, rep ) != ""
}

bool is_input_filt_bam( int rep ) {

	return is_input_filt_bam( 0, rep )
}
