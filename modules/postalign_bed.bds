#!/usr/bin/env bds
#vim: syntax=java

include "species.bds"
include "module_template.bds"


// has functions related to tagalign, and helps getting tagalign from configruation file or command line argument

help == postalign bed/tagalign settings
mem_shuf 		:= "12G"	help Max. memory for UNIX shuf (default: 12G).
no_random_source 	:= false 	help Disable --random-source for UNIX shuf. Hot fix for end of file error.


init_postalign_bed()


void init_postalign_bed() {

	// fraglen0 	= get_conf_val_bool( fraglen0,	["fraglen0"] )
	mem_shuf	= get_conf_val( mem_shuf,	["mem_shuf"] )
	no_random_source = get_conf_val_bool( no_random_source,	["no_random_source"] )

	print("\n\n== postalign bed/tagalign settings\n")
	print( "Max. memory for UNIX shuf\t\t\t: $mem_shuf\n")
	print( "No --random-source for UNIX shuf\t\t: $no_random_source\n")
}

string subsample_tag( string tag, int nlines, bool non_mito, string o_dir, string group ) {

	prefix 		:= replace_dir( rm_ext( tag, ["tagAlign","tag","bed"] ), o_dir )
	nreads_per_mill := metric_prefix( nlines )

	subsampled_tag 	:= "$prefix."+(non_mito?"no_chrM.":"")+"$nreads_per_mill.tagAlign.gz"
	non_mito_param 	:= non_mito ? "grep -v \"chrM\" | " : ""	
	random_source_param := no_random_source ? "" : "--random-source=$tag"

	in 	:= [ tag ]
	out 	:= subsampled_tag

	taskName:= "subsample_tag " + group
	mem := get_res_mem(mem_shuf,1)

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init
	
		//# Subsample tagAlign file
		sys zcat $tag | \
			$non_mito_param shuf -n $nlines $random_source_param | gzip -nc > $subsampled_tag

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group )

	return out
}

string subsample_tag_PE( string tag, int nlines, bool non_mito, string o_dir, string group ) {

	prefix 		:= replace_dir( rm_ext( tag, ["tagAlign","tag","bed"] ), o_dir )
	nreads_per_mill := metric_prefix( nlines )

	subsampled_tag 	:= "$prefix."+(non_mito?"no_chrM.":"")+"$nreads_per_mill.tagAlign.gz"
	non_mito_param 	:= non_mito ? "grep -v \"chrM\" | " : ""
	random_source_param := no_random_source ? "" : "--random-source=$tag"

	joined 		:= "$prefix.joined" // temporary file
	joined_subsampled := "$prefix.joined.subsampled" // temporary file

	in 	:= [ tag ]
	out 	:= subsampled_tag

	taskName:= "subsample_tag_PE " + group
	mem := get_res_mem(mem_shuf,1)

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		// join consecutive two lines into one
		sys zcat $tag | sed 'N;s/\n/\t/' > $joined

		//# Shuffle and split temporary combined file into 2 equal parts
		//# Will produce $PR_PREFIX00 and $PR_PREFIX01
		sys cat $joined | $non_mito_param shuf -n $nlines $random_source_param > $joined_subsampled
	
		//# Subsample tagAlign file
		sys awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\t%s\t%s\t%s\n%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12}' $joined_subsampled | \
			gzip -nc > $subsampled_tag

		sys rm -f $joined $joined_subsampled

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group )

	return out
}

// Adjusts the read-ends in a read BED by Tn5 offsets
string tn5_shift_tag( string tag, string o_dir, string group ) {
	
	prefix 		:= replace_dir( rm_ext( tag, ["tagAlign","tag","bed"] ), o_dir )
	//shifted_tag 	:= "$prefix.shifted.tagAlign.gz"
	shifted_tag 	:= "$prefix.tn5.tagAlign.gz"

	in 	:= [ tag ]
	out 	:= shifted_tag

	taskName:= "shift_tag " + group

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		sys zcat $tag | awk -F '\t' 'BEGIN {OFS = FS}{ if ($6 == "+") {$2 = $2 + 4} else if ($6 == "-") {$3 = $3 - 5} print $0}' | gzip -nc > $shifted_tag

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group )

	return out
}

// make spr(self_pseudo_replicate)
string[] spr( string tag, string pr1_o_dir, string pr2_o_dir, string group ) {
	
	prefix_pr1 	:= replace_dir( rm_ext( tag, ["tagAlign","tag","bed"] ), pr1_o_dir )
	prefix_pr2	:= replace_dir( rm_ext( tag, ["tagAlign","tag","bed"] ), pr2_o_dir )
	tag_pr1		:= "$prefix_pr1.pr1.tagAlign.gz"
	tag_pr2		:= "$prefix_pr2.pr2.tagAlign.gz"
	random_source_param := no_random_source ? "" : "--random-source=$tag"

	in 	:= [ tag ]
	out 	:= [ tag_pr1, tag_pr2 ]

	taskName:= "spr " + group
	mem := get_res_mem(mem_shuf,1)

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		//# Get total number of read pairs
		sys nlines=$( zcat $tag | wc -l )
		sys nlines=$(( (nlines + 1) / 2 ))
		
		//# Shuffle and split BEDPE file into 2 equal parts
		//# Will produce $PR_PREFIX00 and $PR_PREFIX01
		sys zcat $tag | shuf $random_source_param | split -d -l $((nlines)) - $prefix_pr1.

		//# Convert read pairs to reads into standard tagAlign file
		sys gzip -nc $prefix_pr1.00 > $tag_pr1
		sys rm -f $prefix_pr1.00
		sys gzip -nc $prefix_pr1.01 > $tag_pr2
		sys rm -f $prefix_pr1.01

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, ["$group PR 1", "$group PR 2"] )

	return out
}

string[] spr_tag_PE( string tag, string pr1_o_dir, string pr2_o_dir, string group ) {
	
	prefix_pr1 	:= replace_dir( rm_ext( tag, ["bed","tagAlign"] ), pr1_o_dir )
	prefix_pr2 	:= replace_dir( rm_ext( tag, ["bed","tagAlign"] ), pr2_o_dir )

	joined 	:= "$prefix_pr1.joined" // temporary file

	tag_pr1	:= "$prefix_pr1.pr1.tagAlign.gz"
	tag_pr2	:= "$prefix_pr2.pr2.tagAlign.gz"
	random_source_param := no_random_source ? "" : "--random-source=$tag"

	in 	:= [ tag ]
	out 	:= [ tag_pr1, tag_pr2 ]

	taskName:= "spr_tag_PE " + group
	mem := get_res_mem(mem_shuf,1)

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		// join consecutive two lines into one
		sys zcat $tag | sed 'N;s/\n/\t/' > $joined

		//# Get total number of read pairs
		sys nlines=$( cat $joined | wc -l )
		sys nlines=$(( (nlines + 1) / 2 ))

		//# Shuffle and split temporary combined file into 2 equal parts
		//# Will produce $PR_PREFIX00 and $PR_PREFIX01
		sys cat $joined | shuf $random_source_param | split -d -l $((nlines)) - $prefix_pr1.  

		//# Convert read pairs to reads into standard tagAlign file
		sys awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\t%s\t%s\t%s\n%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12}' "$prefix_pr1.00" | \
			gzip -nc > $tag_pr1
		sys rm -f $prefix_pr1.00
		sys awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\t%s\t%s\t%s\n%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12}' "$prefix_pr1.01" | \
			gzip -nc > $tag_pr2
		sys rm -f $prefix_pr1.01

		sys rm -f $joined

		sys $shcmd_finalize
	}
	
	register_par( tid, cpus )

	add_task_to_graph( in, out, ["$group PR 1", "$group PR 2"] )

	return out
}

string pool_tag( string tag1, string tag2, string o_dir, string group ) {
	// LINUX has limit on filename length (255), make it as shorter as possible
	string tag_pooled
	if ( get_basename(tag1).length() < 50 && get_basename(tag2).length() < 50 ) {
		prefix 	:= "$o_dir/" + merge_basename_wo_ext( tag1, tag2, ["tagAlign","tag","bed"] )	
		tag_pooled = "$prefix.tagAlign.gz"
	}
	else {
		prefix 	:= replace_dir( rm_ext( tag1, ["bed","tagAlign"] ), o_dir )	
		tag_pooled = "$prefix"+"_pooled.tagAlign.gz"
	}

	in 	:= [ tag1, tag2 ]
	out 	:= tag_pooled

	taskName:= "pool_tag " + group

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init
		sys zcat $tag1 $tag2 | gzip -nc > $tag_pooled

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group )

	return out
}

string pool_tag( string[] tags, string o_dir, string group ) {
	// LINUX has limit on filename length (255), make it as short as possible
	string tag_pooled
	if ( tags.size() <= 2 && get_basename(tags[0]).length() < 50 && get_basename(tags[1]).length() < 50 ) {
		prefix 	:= "$o_dir/" + merge_basename_wo_ext( tags[0], tags[1], ["tagAlign","tag","bed"] )	
		tag_pooled = "$prefix.tagAlign.gz"
	}
	else {
		prefix 	:= replace_dir( rm_ext( tags[0], ["bed","tagAlign"] ), o_dir )	
		tag_pooled = "$prefix"+"_pooled.tagAlign.gz"
	}
	tags_str 	:= array_to_str( tags, " " ) // join

	in 		:= tags
	out 		:= tag_pooled

	taskName:= "pool_tag " + group

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		sys zcat $tags_str | gzip -nc > $tag_pooled

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group )

	return out
}
