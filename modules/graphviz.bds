#!/usr/bin/env bds
#vim: syntax=java

include "env.bds"
include "output.bds"


grp_shape_box 		:= "box"
grp_shape_node 		:= "ellipse"
grp_fontsize_box 	:= 12
grp_fontsize_node 	:= 10
grp_color_subgraph	:= "gainsboro"
grp_color_node 		:= "whitesmoke"
grp_color_edge		:= "gray"
grp_style_subgraph 	:= "filled,rounded"
grp_style_node 		:= "filled,rounded"

rpt_aux_dir 	:= "$out_dir/report"


string{} _group_name // key: group, val: long group name
string{} _file_label // key: file path, val: label
string{} _file_group // key: file path, val: group

string[] _tmp_in
string[] _tmp_out
string[] _tmp_etc

tmp_delim 	:= ";;"



void add_label_to_graph( string short_label, string long_label ) {
	_group_name{short_label} = long_label
}

void add_file_to_graph( string file, string label, string group ) {
	path := file.path()
	_file_label{ path } = label
	_file_group{ path } = group
}

// add graph element (in -> box -> out)
void add_task_to_graph( string[] in, string[] out, string box_group, string box_name, string box_color ) {
	// save [in,out,etc(box_group,box_name,box_color)] info to temporary arrays and process them later at the end of the pipeline (in _make_dot() ).
	in_str := array_to_str( in, tmp_delim )
	out_str := array_to_str( out, tmp_delim )
	etc_str := "$box_group$tmp_delim$box_name$tmp_delim$box_color"

	_tmp_in.add( in_str )
	_tmp_out.add( out_str )
	_tmp_etc.add( etc_str )
}

void add_task_to_graph( string in, string out, string box_group ) {
	add_task_to_graph( [in], [out], box_group )
}

void add_task_to_graph( string[] in, string out, string box_group ) {
	add_task_to_graph( in, [out], box_group )
}

void add_task_to_graph( string in, string[] out, string box_group ) {
	add_task_to_graph( [in], out, box_group )
}

void add_task_to_graph( string[] in, string[] out, string box_group ) {
	add_task_to_graph( in, out, box_group, "", "" )
}

void add_task_to_graph( string in, string out, string box_group, string box_name, string box_color ) {
	add_task_to_graph( [in], [out], box_group, box_name, box_color )
}

void add_task_to_graph( string[] in, string out, string box_group, string box_name, string box_color ) {
	add_task_to_graph( in, [out], box_group, box_name, box_color )
}

void add_task_to_graph( string in, string[] out, string box_group, string box_name, string box_color ) {
	add_task_to_graph( [in], out, box_group, box_name, box_color )	
}

string html_graph() { // graph diagram
	wait // for thread safety
	html := "<button id='btn_toggle'>Toggle workflow</button><br><br>\n"+\
		"<script>$('#btn_toggle').click(function() {$('#graph').toggle();});</script>"+\
		"<div id='graph'><b>Workflow diagram</b>&nbsp<small>(g./b. peak : gapped/broad peak from MACS2, "+\
		"n. peak : narrow peak from MACS2, r. peak : relaxed peak from SPP)</small><br>"
	prefix := title=="" ? "" : (title+"_")
	mkdir(rpt_aux_dir)
	dot := _make_dot("$rpt_aux_dir/$prefix"+"workflow.dot")
	svg := "$rpt_aux_dir/$prefix"+"workflow.svg"

	// run graph
	taskName := "report"
	system := "local" // do not use cluster engine for this task
	
	task {
		sys $shcmd_init
		sys dot -Tsvg $dot > $svg 2> /dev/null || echo "svg: $svg" # to suppress dot font error (exit code=1)
	}

	html += "<object data='"+ get_rel_path( svg ) + "'></object></div><br>"
	html += "</div><br>\n"

	return html
}

string _make_dot( string file ) {
	dot_contents := "strict digraph {\n\nrankdir=LR\n\nnode [shape=$grp_shape_node,style=\"$grp_style_node\",margin=0,fontsize=$grp_fontsize_node];" + \
			"\nedge [color=$grp_color_edge,fontsize=$grp_fontsize_node,arrowsize=0.5];\n\n";

	string{} nodes // key: file type, val: 1 line node definition
	string{} boxes // key: box name, val: 1 line node definition
	string{} links // key: group (rep1, ctl1, ...), val: multiple links for replicate

	string[] groups 
	string[] _tmp_links
	int[] id_excluded

	for ( int k=0; k<_tmp_in.size(); k++ ) {
		string[] in = _tmp_in[k].split(tmp_delim)
		string[] out = _tmp_out[k].split(tmp_delim)
		string[] etc = _tmp_etc[k].split(tmp_delim)

		box_group := etc[0]
		box_name := etc[1]
		box_color := etc[2]
		// {in1, in2, ...} -> box -> {out1, out2, ...} : with a box
		// {in1, in2, ...} -> {out1, out2, ...} : without a box

		// to prevent duplicate arrows
		//    ->     ->
		// IN -> box -> OUT
		//    ->     -> 
		bool{} added_in_to_box
		bool{} added_box_to_out

		for ( int i=0; i< in.size(); i++ )  {
			if ( in[i] == "" ) continue

			in_label := _find_label( in[i] ) 

			for ( int j=0; j<out.size(); j++ ) {
				if ( out[j] == "" ) continue

				out_label := _find_label( out[j] ) 

				if ( in_label == "" && out_label == "" || in_label != "" && out_label == "" ) { 
					continue
				}

				string new_in_path, new_box_name
				if ( in_label == "" && out_label != "" ) { // node w/o label -> node w. label					
					in_parent := _find_parent_path_with_label( in[i] )
					if ( in_parent == "" ) continue
					new_in_path = in_parent
				}
				else {
					new_in_path = in[i]
				}

				new_in_label := _find_label( new_in_path )
				in_group := _find_group( new_in_path )
				in_full := "$new_in_label-$in_group"
				in_rel_path:= get_rel_path( new_in_path )
				string in_extra_param
				if ( path_exists("$out_dir/$in_rel_path") ) in_extra_param = "href=\"../$in_rel_path\","
				nodes{in_full} = "\t\"$in_full\" [label=\"$new_in_label\",id=\"$in_full\"style=\"$grp_style_node\","+\
						"fillcolor=$grp_color_node,tooltip=\"$in_rel_path\",$in_extra_param target=\"_blank\"];"

				out_group := _find_group( out[j] )
				out_full  := "$out_label-$out_group"
				out_rel_path := get_rel_path( out[j] )
				string out_extra_param
				if ( path_exists("$out_dir/$out_rel_path") ) out_extra_param = "href=\"../$out_rel_path\","
				nodes{out_full} = "\t\"$out_full\" [label=\"$out_label\",id=\"$out_full\",style=\"$grp_style_node\","+\
						"fillcolor=$grp_color_node,tooltip=\"$out_rel_path\",$out_extra_param target=\"_blank\"];"

				in_to_out := "\t\"$in_full\" -> \"$out_full\";\n"

				if ( box_name != "" ) { // if box exists (a->box->b)
					box_full := "$box_name-$box_group"
					boxes{box_full} = "\t\"$box_full\" [label=\"$box_name\",id=\"$box_full\",fontsize=$grp_fontsize_box,"+\
							"shape=$grp_shape_box,style=\"$grp_style_node\",fillcolor=$box_color];"

					in_to_box := "\t\"$in_full\" -> \"$box_full\";\n"
					box_to_out := "\t\"$box_full\" -> \"$out_full\";\n"

					if ( !added_in_to_box.hasKey(in_to_box) ) { // to prevent duplicate arrows
						if ( in_group == box_group && box_group != "" ) groups.add(in_group)
						else 						groups.add("outside")
						_tmp_links.add(in_to_box)
						added_in_to_box{in_to_box} = true 
					}
					if ( !added_box_to_out.hasKey(box_to_out) ) {// to prevent duplicate arrows
						if ( out_group == box_group && box_group != "" )	groups.add(out_group)
						else 							groups.add("outside")
						_tmp_links.add(box_to_out)
						added_box_to_out{box_to_out} = true
					}
					// exclude A -> B when A -> BOX -> B is present
					if ( _tmp_links.has(in_to_out) ) id_excluded.add( _tmp_links.indexOf(in_to_out) )
				}
				else {
					if ( in_group == out_group ) 	groups.add(in_group)
					else 				groups.add("outside")
					
					_tmp_links.add(in_to_out)
				}
			}
		}
	}

	for ( string node : nodes ) dot_contents += (node + "\n")
	for ( string box : boxes ) dot_contents += (box + "\n")
	for ( int i=0; i<groups.size(); i++) {
		if ( id_excluded.has(i) ) continue

		group := groups[i]
		link := _tmp_links[i]
		if ( links.hasKey(group) ) {
			links{group} += link
		}
		else {
			links{group} = link
		}
	}

	for ( string key : links.keys() ) {
		if ( key == "" ) continue			
		link := links{key}
		if ( key == "outside" ) {
			dot_contents += link+"\n\n";
		}
		else {
			group_label := _group_name.hasKey( key ) ? _group_name{key} : key

			subgraph := "subgraph cluster_"+key.replace("-","_")+" {\n\n"
			subgraph += link+"\n"
			subgraph += "color=\"$grp_color_subgraph\";"
			subgraph += "style=\"$grp_style_subgraph\";"
			subgraph += "label=\"$group_label\";"
			subgraph += "}\n\n"

			dot_contents += subgraph
		}	
	}

	dot_contents += "\n\n}"
	file.write( dot_contents )

	return file.path()
}

string _find_label( string path ) {
	return _file_label.hasKey( path.path() ) ? _file_label{ path.path() } : ""
}

string _find_group( string path ) {
	return _file_group.hasKey( path.path() ) ? _file_group{ path.path() } : ""
}

string _find_parent_path_with_label( string path ) {
	path = path.path() // get absolue path

	for ( int k=0; k< _tmp_in.size(); k++) {
		string[] in = _tmp_in[k].split(tmp_delim)
		string[] out = _tmp_out[k].split(tmp_delim)
		string[] etc = _tmp_etc[k].split(tmp_delim)

		for ( int j=0; j<out.size(); j++ ) {
			if ( out[j] == "" ) continue
			if ( out[j].path() != path ) continue

			for ( int i=0; i< in.size(); i++ )  {
				if ( in[i] == "" ) continue
				in_label := _find_label( in[i] )
				if ( in_label == "" ) {
					in_parent := _find_parent_path_with_label( in[i] )
					if ( in_parent == "" ) continue
					else return in_parent
				}
				else {
					return in[i]
				}
			}
		}
	}
	return ""
}
