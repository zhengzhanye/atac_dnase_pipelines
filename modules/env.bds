#!/usr/bin/env bds
#vim: syntax=java

include "cluster.bds"

help == shell environment settings
mod 		:= ""		help Modules separated by ; (example: "bowtie/2.2.4; bwa/0.7.7; picard-tools/1.92").
shcmd 		:= ""		help Shell commands separated by ;. Shell var. must be written as ${VAR} not as $VAR (example: "export PATH=${PATH}:/usr/test; VAR=test"). 
addpath 	:= "" 		help Path separated by ; or : to be PREPENDED to \$PATH (example: "/bin/test:${HOME}/utils").
conda_env 	:= ""		help Anaconda Python (or Miniconda) environment name for all softwares including Python2.
conda_env_py3 	:= ""		help Anaconda Python (or Miniconda) environment name for Python3.
conda_bin_dir	:= ""		help Anaconda Python (or Miniconda) bin directory.
cluster_task_min_len 	:= 60 	help Minimum length for a cluster job in seconds (dealing with NFS delayed write, default: 60).
cluster_task_delay 	:= 0 	help Constant delay for every job in seconds (dealing with NFS delayed write, default: 0).

shcmd_init 	:= "" 	// Shell command executed prior to all BigDataScript tasks (use this for setting up shell environment)
shcmd_init_py3	:= "" 	// for softwares using python3
shcmd_finalize 	:= ""

delay_conda_env := 5 		// wait for 5 seconds for conda env activation


init_env()


void init_env() {
	conda_env	= get_conf_val( conda_env, 		["conda_env"] )
	conda_env_py3	= get_conf_val( conda_env_py3, 		["conda_env_py3"] )
	conda_bin_dir	= get_conf_val( conda_bin_dir, 		["conda_bin_dir"] )
	cluster_task_min_len	= get_conf_val_int( cluster_task_min_len, 	["cluster_task_min_len"] )
	cluster_task_delay	= get_conf_val_int( cluster_task_delay, 	["cluster_task_delay"] )

	// environment modules (sh,bash) init. file paths
	init_mods 	:= ["/etc/profile.d/modules.sh", "/etc/profile.d/modules.bash"] 
	init_mod 	:= "" // module init. shell script found among the above list
	
	moduleshome := get_shell_var("MODULESHOME").replace("\n","") // get shell var MODULESHOME if exists
	if (moduleshome!="") init_mods.add("$moduleshome/init/bash")

	string shellcmd, module, path, conda_py2, conda_py3
	
	for ( string file : init_mods ) { // find env. modules init script
		if ( file.exists() ) {
			init_mod = file
			break
		}
	}

	if ( init_mod == "" ) {
		print("\n\nInfo: Environments module not found on your system " + \
			"(e.g. /etc/profile.d/modules.sh). Ignoring shell env. parameters like '-mod'. \n")
	}

	// read from conf./env. file
	for( string k : conf.keys() ) {		
		string val = conf{k}		
		if ( (k.indexOf("mod_")>=0) || (k=="mod") ) { // concat. module
			if ( init_mod != "" ) {
				trimmed := val.trim().replace("module add ","").replace( ":", " " ).replace( ";", " " ).replace( ",", " " ).trim()
				trimmed = trimmed.replace( "   ", " ").replace( "  ", " ")
				module = module + " " + trimmed
			}
		}
		else if ( k.indexOf("shcmd")>=0 ) {
			shellcmd = shellcmd + " " + val + ";"
		}
		else if ( k.indexOf("addpath")>=0 ) {
			path = path + val.trim().replace(",",":").replace(";",":").replace(" ",":").replace(":::",":").replace("::",":") + ":"
		}
	}

	// read from cmd. line arg.
	if ( mod!="" ) {
		string module_header = ". $init_mod;"
		if ( init_mod != "" ) { // if /etc/profile.d/modules.sh exists
			trimmed := mod.trim().replace("module add ","").replace( ":", " " ).replace( ";", " " ).replace(","," " ).trim()
			trimmed = trimmed.replace( "   ", " ").replace( "  ", " ")
			module = module + " " + trimmed
		}
	}
	if ( shcmd!="" ) shellcmd = shellcmd + shcmd.trim() + "; "
	if ( addpath!="" ) path = path + \
			addpath.trim().replace(",",":").replace(";",":").replace(" ",":").replace(":::",":").replace("::",":") + ":"
	if ( module !="" ) module = ". $init_mod; module add " + module + ";"

	// check script directories to add to PATH
	script_file_paths := get_script_file_paths()
	for ( string _path : script_file_paths ) {		
		if ( _path.exists() ) {
			path = path + _path + ":"
		}
	}

	if ( conda_bin_dir ) conda_bin_dir += "/"
	if ( path !="" ) path = " export PATH=$path:\${PATH}:/bin:/usr/bin:/usr/local/bin:\${HOME}/.bds;"
	// add conda env
	if ( conda_env != "" ) conda_py2 = \
		"if [[ -f $(which $conda_bin_dir"+"conda) && $($conda_bin_dir"+"conda env list | grep $conda_env | wc -l) != \"0\" ]];"+\
		" then source $conda_bin_dir"+"activate $conda_env; sleep $delay_conda_env; fi; "
	if ( conda_env_py3 != "" ) conda_py3 = \
		"if [[ -f $(which $conda_bin_dir"+"conda) && $($conda_bin_dir"+"conda env list | grep $conda_env_py3 | wc -l) != \"0\" ]];"+\
		" then source $conda_bin_dir"+"activate $conda_env_py3; sleep $delay_conda_env; fi; "

	// additional initialization
	shcmd_init_ := module + path + shellcmd
	shcmd_init_ += "; set -o pipefail" 		// to catch and stop on non-zero exit code in a UNIX pipe
	shcmd_init_ += "; STARTTIME=$(date +%s)" 	// to check running time for a task
	if ( nice != 0 ) shcmd_init_ += "; if (( $(nice)<$nice )); then renice -n $nice $$; fi" 		// to set process priority (niceness)

	shcmd_init_ = shcmd_init_.replace( ": :", ":" ).replace( "::", ":" ).replace( "; ;", ";" ).replace( ";;", ";" )
	shcmd_init 	= conda_py2 + shcmd_init_
	shcmd_init_py3 	= conda_py3 + shcmd_init_

	if ( is_system_local() ) {
		shcmd_finalize = "TASKTIME=$[$(date +%s)-${STARTTIME}]; echo \"Task has finished (${TASKTIME} seconds).\"; "+\
                                 "sleep $cluster_task_delay"
	}
	else {
		shcmd_finalize = "TASKTIME=$[$(date +%s)-${STARTTIME}]; if [ ${TASKTIME} -lt $cluster_task_min_len ]; "+\
				"then echo \"Waiting for $[$cluster_task_min_len-${TASKTIME}] seconds.\";"+\
				" sleep $[$cluster_task_min_len-${TASKTIME}]; sleep $cluster_task_delay; fi"
	}

	print("\n\n== shell environment info\n")
	print( "Conda env. \t\t\t: $conda_env\n" )
	print( "Conda env. for python3\t\t: $conda_env_py3\n" )
	print( "Conda bin. directory\t\t: $conda_bin_dir\n" )	
	print( "\nShell cmd. for init.\t\t: $shcmd_init\n" )
	print( "\nShell cmd. for init.(py3)\t: $shcmd_init_py3\n" )
	print( "\nShell cmd. for fin.\t\t: $shcmd_finalize\n" )
	print( "\nCluster task min. len.\t\t: $cluster_task_min_len\n" )
	print( "\nCluster task delay\t\t\t: $cluster_task_delay\n" )
}

